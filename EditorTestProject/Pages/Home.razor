@page "/"
@using EditorTestProject.Dialogs
@using YngveHestem.GenericParameterCollection
@using YngveHestem.GenericParameterCollection.Editor
@using YngveHestem.GenericParameterCollection.RadzenBlazor

@inject DialogService DialogService

<PageTitle>Editor Test</PageTitle>

<h1>Editor</h1>

<RadzenButton Click="() => GetParameterCollectionAsJson()">Get editor-parameterCollection as json</RadzenButton>

<ParameterCollectionView @ref="@_parameterCollectionView"></ParameterCollectionView>

@code 
{
    private ParameterCollection _parametersOriginal = new ParameterCollection 
    {
        { "test", "This is a test-string" }
    };
    private ParameterCollectionView? _parameterCollectionView;
    private EditorEngine _editorEngine = new EditorEngine(new EditorEngineOptions {
        SupportedEnumsToSelect = new List<Enum>
        {
            ParameterType.Bool,
            HorizontalAlign.Center,
            Orientation.Horizontal
        },
        //AdditionalInfoMaxRenderValue = 5,
        ShowAdditionalInfo = false,
    });

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var editedParameterCollection = _editorEngine.CreateEditorParameterCollection(_parametersOriginal, null);
            while(_parameterCollectionView == null)
            {
                Thread.Sleep(100);
            }
            _parameterCollectionView.ParameterCollection = editedParameterCollection;
        }
    }

    private void GetParameterCollectionAsJson()
    {
        if (_parameterCollectionView?.ParameterCollection != null)
        {
            var json = _parameterCollectionView.ParameterCollection.ToJson(Newtonsoft.Json.Formatting.Indented);
            DialogService.Open<DialogJsonViewer>("ParameterCollection as JSON", new Dictionary<string, object>
            {
                { "Json", json }
            });
        }
    }
}
